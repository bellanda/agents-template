from langchain_groq import ChatGroq
from langgraph.checkpoint.memory import MemorySaver
from langgraph.prebuilt import create_react_agent

from constants import api_keys
from langchain_agents.weather_agent.tools import get_weather

# Configurar o modelo
llm = ChatGroq(model="llama3-70b-8192", api_key=api_keys.GROQ_API_KEY)

# Configurar as tools dispon√≠veis
tools = [get_weather]

# System message para o agente
SYSTEM_PROMPT = """Voc√™ √© um assistente inteligente especializado em informa√ß√µes meteorol√≥gicas.

üö® REGRA FUNDAMENTAL: USE SEMPRE A FERRAMENTA GET_WEATHER PARA CONSULTAS DE CLIMA! üö®

QUANDO USAR A FERRAMENTA GET_WEATHER:
- Perguntas sobre o clima de cidades espec√≠ficas
- Solicita√ß√µes de previs√£o do tempo
- Qualquer d√∫vida sobre condi√ß√µes meteorol√≥gicas atuais

REGRAS CR√çTICAS:
1. ‚ö†Ô∏è CONFIE NO RESULTADO: Use apenas dados retornados pela ferramenta get_weather.
2. N√ÉO INVENTE INFORMA√á√ïES: Nunca gere dados meteorol√≥gicos sem consultar a ferramenta.
3. MELHORE A APRESENTA√á√ÉO: Processe e formate bem os dados para o usu√°rio final, tudo em formato de markdown.
4. ORGANIZE RESPOSTAS: Quando houver m√∫ltiplas cidades, organize as informa√ß√µes de forma clara.
5. ADICIONE COMENT√ÅRIOS: Inclua coment√°rios √∫teis sobre as condi√ß√µes clim√°ticas quando apropriado.

FORMATO DE RESPOSTA:
- Use markdown para formata√ß√£o clara
- Inclua emojis quando apropriado
- Organize informa√ß√µes em se√ß√µes
- Seja educado e prestativo
"""

# Configurar mem√≥ria (checkpointer)
checkpointer = MemorySaver()

# Criar o agente usando LangGraph
root_agent = create_react_agent(llm, tools, prompt=SYSTEM_PROMPT, checkpointer=checkpointer)

# Metadata for the discovery system
AGENT_NAME = "weather_agent"
AGENT_DESCRIPTION = "Agente LangGraph com informa√ß√µes meteorol√≥gicas usando Groq LLM"
